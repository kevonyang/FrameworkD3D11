cbuffer LightBuffer:register(b0)
{
	float4 LightAmbient;
	float4 LightDiffuse;
	float4 LightSpecular;
	float3 LightDir;
	float DiffusePower;
	float SpecularPower;
	float SpecularHardness;
};


Texture2D ShaderTexture;
SamplerState Sampler;

struct PSInput
{
	float4 Pos:SV_POSITION;
	float2 Texcoord:TEXCOORD0;
	float3 Normal:NORMAL;
	float3 ViewDir:TEXCOORD1;
};

float4 PSMain(PSInput input):SV_TARGET
{
	float4 output;
	//ambient
	float4 color = LightAmbient;
	
	//diffuse
	float3 reverse = -LightDir;
	float intensity = saturate(dot(reverse, input.Normal));
	color += LightDiffuse * intensity;
	color = saturate(color);
	//texture
	output = ShaderTexture.Sample(Sampler, input.Texcoord);
	output = output * color * DiffusePower;
	
	//specular
	float3 H = normalize(reverse + input.ViewDir);
	float NdotH = dot(input.Normal, H);
	float specular = pow(saturate(NdotH), SpecularHardness);
	float4 specularColor = LightSpecular * specular * SpecularPower;
	specularColor = saturate(specularColor);
	output += specularColor;
	output = saturate(output);

	return output;
}